* org-multi-wiki
This is a small wiki package for Emacs.
Unlike other known existing solutions, this package supports multiple wikis on a single machine.
It uses alphapapa's [[https://github.com/alphapapa/org-ql][helm-org-ql]] for searching, which makes navigation and entry creation seamless.

[[https://github.com/akirak/org-multi-wiki/workflows/lint/badge.svg?branch=master][https://github.com/akirak/org-multi-wiki/workflows/lint/badge.svg?branch=master]]
** Table of contents
:PROPERTIES:
:TOC: siblings
:END:
-  [[#features][Features]]
-  [[#prerequisites][Prerequisites]]
-  [[#installation][Installation]]
-  [[#configuration][Configuration]]
-  [[#usage][Usage]]
  -  [[#switching-the-current-wiki][Switching the current wiki]]
  -  [[#helm-org-multi-wiki][helm-org-multi-wiki]]
-  [[#details][Details]]
  -  [[#wiki-link-type][wiki link type]]
-  [[#alternatives][Alternatives]]
-  [[#license][License]]

** Features
- Capable of running multiple wikis simultaneously inside a single Emacs session. You can search contents from multiple directories, and you can create a new entry in any of the directory.
- Using =helm-org-ql= for searching entries.
- Add =wiki= link type to Org mode for safely resolving wiki directory locations based on directory IDs, not on absolute paths.
** Prerequisites
- Emacs 26.1 or later
- Org 9.3 or later
- =dash.el=
- =s.el=
- =org-ql=
- [[https://github.com/alphapapa/org-ql][helm-org-ql]], if you use helm-org-multi-wiki (recommended)
** Installation
This package is not available on MELPA yet.

Install the dependencies and clone this repository to your local machine.
You can use =straight.el= or Quelpa.
** Configuration
Below is an example configuration through =use-package=:

#+begin_src emacs-lisp
  (use-package org-multi-wiki
    :custom
    (org-multi-wiki-directories '((default "~/org/")
                                  (project1 "~/projects/project1/project1-docs")))
    ;; ID of the initial current wiki
    (org-multi-wiki-default-directory-id 'default))

  (use-package helm-org-multi-wiki)
 #+end_src

First configure =org-multi-wiki-directories= variable.
It is a list where each item is a list of the following items:

- A symbol to identify the wiki
- A directory containing Org files

For more options, see =org-multi-wiki= customization group.
** Usage
*** Switching the current wiki
This package supports a notion of /current wiki/.
To switch the wiki, use =org-multi-wiki-switch=.
Optionally, you can work on a specific wiki by calling functions with an ID.
*** helm-org-multi-wiki
=helm-org-multi-wiki= command is the main entry point in this package.
It uses [[https://github.com/alphapapa/org-ql#helm-org-ql][helm-org-ql]] for search and a dummy source for entry creation.
It is included in =helm-org-multi-wiki.el=.

By default, it lets you select a heading or create a new entry in the current wiki.

With a universal prefix argument (~C-u~), you can select wikis.
You can select multiple wikis with ~C-SPC~.
**** Running on particular wikis
:PROPERTIES:
:CREATED_TIME: [2020-02-22 Sat 14:34]
:END:
You can also use it as a function which accepts an ID or a list of IDs.
You can define your own command to search queries in a specific wiki.

#+begin_src emacs-lisp
  (defun helm-org-multi-wiki-project1 ()
    (interactive)
    (helm-org-multi-wiki '(project1)))
#+end_src

When multiple wikis are given, you can select a directory in which you want to create a new file.
This is available as alternative actions (~tab~) in the dummy source of Helm.

The package also provides =helm-org-multi-wiki-all=, which performs search on all wikis.
**** Quickly creating an entry in a particular wiki
:PROPERTIES:
:CREATED_TIME: [2020-02-22 Sat 14:35]
:END:
The dummy source has a dedicated keymap =helm-make-helm-org-multi-wiki-dummy-source-map= which lets you bind keys to create an entry in a particular wiki:

#+begin_src emacs-lisp
  (general-def :keymap 'helm-org-multi-wiki-dummy-source-map :package 'helm-org-multi-wiki
    :prefix "C-c C-c"
    "p" (helm-org-multi-wiki-def-create-entry-action programming))
#+end_src

With this configuration, you can create an entry in =programming= wiki from the minibuffer input by pressing ~C-c C-c p~.

=helm-org-multi-wiki-def-create-entry-action= macro defines an interactive function which exits the running helm session and visits an entry.
** Details
*** =wiki= link type
:PROPERTIES:
:CREATED_TIME: [2020-02-09 Sun 16:01]
:END:
This package adds =wiki= link type to =org-link-parameters=.

The link format complies to one of the following formats:

- Linking with a custom ID: =WIKIID:[subdir/]TITLE[::#customid]=
- Linking with a heading: =WIKIID:[subdir/]TITLE[::*heading]=

=WIKIID= is the ID of a directory.

=TITLE= can be either the base name of an escaped file name (i.e. without =.org=) or its original top-level heading.
=::= and its following part is omitted when linking to a top-level heading in a file.

File resolution is done by attempting the following schemes, in that order:

1. It tries to find a file with the base name of the exact =TITLE=.
2. It escapes =TITLE= into a safe file name and tries to find a file with the base name.
3. It tries to find a file with a top-level heading matching =TITLE= in the directory.

=subdir= is not supported now, but it will be added when this package supports recursive file search.
** Alternatives
There are several knowledge base systems for Emacs based on Org mode.

[[https://github.com/Kungsgeten/org-brain][org-brain]] and [[https://github.com/jethrokuan/org-roam][org-roam]] are especially powerful ones.
org-brain is based on the idea of concept mapping, and org-roam is a rudimentary replica of another software named Roam.
org-multi-wiki is not based on such a specific idea.
It is a set of hacks to implement a wiki system on top of Helm and Org mode, so it is smaller and can be used in broader situations.

[[https://github.com/abo-abo/plain-org-wiki][plain-org-wiki]] is the direct inspiration of this package.
org-multi-wiki supports multiple wiki directories and takes advantage of =helm= and =org-ql= for providing a rich querying interface.
** License
GPLv3
** COMMENT Meta :noexport:
:PROPERTIES:
:TOC:      ignore
:END:
# The COMMENT keyword prevents GitHub's renderer from showing this entry.
# Local Variables:
# eval: (when (require (quote org-make-toc) nil t) (org-make-toc-mode t))
# End:
